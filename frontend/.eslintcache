[{"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\index.js":"1","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\App.js":"2","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\MainPage.js":"4","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\users\\UserForm.js":"5","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Game.js":"6","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Bet.js":"7","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\PlacedBets.js":"8","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Roulette.js":"9","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\Navbar.js":"10","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Deposit.js":"11","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\History.js":"12","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\chat\\Chat.js":"13","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\Qotes.js":"14","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\ActualBets.js":"15","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Scoreboard.js":"16","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\index.js":"17","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\App.js":"18","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\reportWebVitals.js":"19","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\Navbar.js":"20","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\users\\UserForm.js":"21","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Game.js":"22","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\MainPage.js":"23","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Scoreboard.js":"24","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\History.js":"25","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Deposit.js":"26","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Bet.js":"27","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Roulette.js":"28","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\PlacedBets.js":"29","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\ActualBets.js":"30","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\Qotes.js":"31","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\chat\\Chat.js":"32"},{"size":461,"mtime":1641769423173,"results":"33","hashOfConfig":"34"},{"size":925,"mtime":1642287873028,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1640874750334,"results":"36","hashOfConfig":"34"},{"size":1228,"mtime":1642293171895,"results":"37","hashOfConfig":"34"},{"size":7562,"mtime":1642278093140,"results":"38","hashOfConfig":"34"},{"size":2370,"mtime":1641769375787,"results":"39","hashOfConfig":"34"},{"size":7962,"mtime":1641763186039,"results":"40","hashOfConfig":"34"},{"size":2268,"mtime":1642365525215,"results":"41","hashOfConfig":"34"},{"size":2011,"mtime":1641339522565,"results":"42","hashOfConfig":"34"},{"size":7840,"mtime":1642287623043,"results":"43","hashOfConfig":"34"},{"size":2302,"mtime":1642293055574,"results":"44","hashOfConfig":"34"},{"size":10038,"mtime":1642372230152,"results":"45","hashOfConfig":"34"},{"size":11118,"mtime":1641604163606,"results":"46","hashOfConfig":"34"},{"size":1170,"mtime":1641762806776,"results":"47","hashOfConfig":"34"},{"size":7020,"mtime":1641655551819,"results":"48","hashOfConfig":"34"},{"size":2997,"mtime":1642292839442,"results":"49","hashOfConfig":"34"},{"size":461,"mtime":1641769423173,"results":"50","hashOfConfig":"51"},{"size":925,"mtime":1642287873028,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1640874750334,"results":"53","hashOfConfig":"51"},{"size":7840,"mtime":1642287623043,"results":"54","hashOfConfig":"51"},{"size":7562,"mtime":1642278093140,"results":"55","hashOfConfig":"51"},{"size":2370,"mtime":1641769375787,"results":"56","hashOfConfig":"51"},{"size":1228,"mtime":1642293171895,"results":"57","hashOfConfig":"51"},{"size":2997,"mtime":1642292839442,"results":"58","hashOfConfig":"51"},{"size":10038,"mtime":1642372230152,"results":"59","hashOfConfig":"51"},{"size":2302,"mtime":1642293055574,"results":"60","hashOfConfig":"51"},{"size":7962,"mtime":1641763186039,"results":"61","hashOfConfig":"51"},{"size":2011,"mtime":1641339522565,"results":"62","hashOfConfig":"51"},{"size":2268,"mtime":1642365525215,"results":"63","hashOfConfig":"51"},{"size":7020,"mtime":1641655551819,"results":"64","hashOfConfig":"51"},{"size":1170,"mtime":1641762806776,"results":"65","hashOfConfig":"51"},{"size":11118,"mtime":1641604163606,"results":"66","hashOfConfig":"51"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"hi341u",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"69"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"69"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"69"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j9i1v6",{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\index.js",[],["141","142"],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\App.js",["143"],"import './App.css';\r\nimport MainPage from './ui/MainPage';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport UserForm from './ui/users/UserForm';\r\nimport Game from './ui/game/Game';\r\nimport Navbar from './ui/Navbar';\r\nimport History from './ui/game/History';\r\nimport Deposit from './ui/game/Deposit';\r\nimport Scoreboard from './ui/game/Scoreboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <BrowserRouter>\r\n        <Route exact path='/' component={MainPage} />\r\n        <Route exact path='/form/:action' component={UserForm} />\r\n        <Route exact path='/game/:login' component={Game} />\r\n        <Route exact path='/game/:login/deposit' component={Deposit} />\r\n        <Route exact path='/game/:login/history' component={History} />\r\n        <Route exact path='/game/:login/scoreboard' component={Scoreboard} />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\MainPage.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\users\\UserForm.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Game.js",["144"],"import Cookies from 'js-cookie';\r\nimport * as mqtt from 'mqtt';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react/cjs/react.development';\r\nimport Bet from './Bet';\r\nimport PlacedBets from './PlacedBets';\r\nimport { useParams } from 'react-router-dom';\r\nimport Roulette from './Roulette';\r\nimport Navbar from '../Navbar';\r\nimport { Chip } from '@material-ui/core';\r\nimport MonetizationOnOutlinedIcon from '@mui/icons-material/MonetizationOnOutlined';\r\nimport ActualBets from './ActualBets';\r\n\r\nfunction Game() {\r\n  const brokerAddress = 'localhost:8000/mqtt';\r\n  const [timer, setTimer] = useState(null);\r\n  const [winningColor, setWinnigColor] = useState(null);\r\n  const [winningNumber, setWinningNumber] = useState(null);\r\n  const { login } = useParams();\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/#', () => {\r\n      client.on('message', (topic, message) => {\r\n        if (topic === 'game/timer') setTimer(message.toString());\r\n      });\r\n    });\r\n    client.on('message', (topic, message) => {\r\n      if (topic === 'game/result') {\r\n        setWinnigColor(JSON.parse(message.toString()).color);\r\n        setWinningNumber(JSON.parse(message.toString()).number);\r\n      }\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <ActualBets timer={timer} />\r\n      <Navbar login={login} />\r\n      <Chip\r\n        color='secondary'\r\n        style={{ margin: '10px' }}\r\n        label={`Round hash: ${Cookies.get('gameId')}`}\r\n      />\r\n      <Roulette timer={timer} number={winningNumber} />\r\n      <Chip\r\n        color='secondary'\r\n        style={{ margin: '10px', fontSize: '20px', padding: '5px' }}\r\n        label={`Next round: ${\r\n          timer === 'losowanie...' ? 'Wait for result' : timer + 's'\r\n        }`}\r\n      />\r\n      <br />\r\n      <Chip\r\n        style={{\r\n          padding: '10px',\r\n          border: '1px solid rgb(245, 0, 87)',\r\n          color: 'rgb(245, 0, 87)',\r\n        }}\r\n        avatar={\r\n          <MonetizationOnOutlinedIcon\r\n            fontSize='large'\r\n            style={{ color: 'rgb(245, 0, 87)' }}\r\n          />\r\n        }\r\n        variant='outlined'\r\n        label={`${Cookies.get(`money${login}`)}`}\r\n      />\r\n      <Bet timer={timer} />\r\n      <PlacedBets />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Bet.js",["145","146"],"import {\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  TextField,\r\n  Container,\r\n  Button,\r\n  ButtonGroup,\r\n  makeStyles,\r\n  createTheme,\r\n  MuiThemeProvider,\r\n  Snackbar,\r\n} from '@material-ui/core/';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport { red, green, grey } from '@mui/material/colors';\r\nimport { useState, useEffect } from 'react/cjs/react.development';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as mqtt from 'mqtt';\r\nimport Cookies from 'js-cookie';\r\nimport axios from 'axios';\r\nimport { forwardRef } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  dsplInput: {\r\n    display: 'block',\r\n    marginTop: '5px',\r\n  },\r\n  dsplRadio: {\r\n    display: 'inline-block',\r\n  },\r\n});\r\n\r\nconst Alert = forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;\r\n});\r\n\r\nfunction Bet({ timer }) {\r\n  const [betColor, setBetColor] = useState(null);\r\n  const [coins, setCoins] = useState(0);\r\n  const [focus, setFocus] = useState(false);\r\n  const [newBet, setNewBet] = useState(null);\r\n  const { login } = useParams();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState({\r\n    coinsHigherThan0: false,\r\n    pickedColor: false,\r\n    succesfullyPlacedBet: false,\r\n    betPlacedTooLate: false,\r\n    notEnoughCoins: false,\r\n  });\r\n\r\n  const addCoins = (value) => {\r\n    !coins\r\n      ? setCoins(parseInt(value))\r\n      : setCoins(parseInt(coins) + parseInt(value));\r\n    setFocus(true);\r\n  };\r\n\r\n  const newTheme = createTheme({\r\n    palette: { primary: red, secondary: green, default: grey },\r\n  });\r\n  const brokerAddress = 'localhost:8000/mqtt';\r\n\r\n  const placeBet = () => {\r\n    if (coins === undefined || coins === 0)\r\n      setOpen({ ...open, coinsHigherThan0: true });\r\n    else {\r\n      if (betColor === null) setOpen({ ...open, pickedColor: true });\r\n      else {\r\n        if (timer === 'losowanie...')\r\n          setOpen({ ...open, betPlacedTooLate: true });\r\n        else {\r\n          if (coins > Cookies.get(`money${login}`))\r\n            setOpen({ ...open, notEnoughCoins: true });\r\n          else {\r\n            axios\r\n              .post(\r\n                `https://localhost:5000/bets/${Cookies.get(\r\n                  `username${login}`\r\n                )}/game/${Cookies.get('gameId')}`,\r\n                {\r\n                  color: betColor,\r\n                  value: coins,\r\n                }\r\n              )\r\n              .then((value) => {\r\n                setNewBet({ ...value.data, value: coins });\r\n                axios\r\n                  .put('https://localhost:5000/users/', {\r\n                    username: login,\r\n                    money:\r\n                      parseInt(Cookies.get(`money${login}`)) - parseInt(coins),\r\n                  })\r\n                  .then(() => {\r\n                    Cookies.set(\r\n                      `money${login}`,\r\n                      parseInt(Cookies.get(`money${login}`)) - parseInt(coins)\r\n                    );\r\n                  });\r\n              });\r\n            setOpen({ ...open, succesfullyPlacedBet: true });\r\n            setBetColor(null);\r\n            setCoins(0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/roundHash');\r\n    client.on('message', (topic, message) => {\r\n      Cookies.set('gameId', message.toString());\r\n      axios.get(`https://localhost:5000/users/${login}`).then((value) => {\r\n        Cookies.set(`money${login}`, value.data.money);\r\n      });\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    if (newBet !== null) {\r\n      client.publish(\r\n        'game/bet',\r\n        JSON.stringify({\r\n          username: Cookies.get(`username${login}`),\r\n          color: newBet.color,\r\n          coins: newBet.value,\r\n        })\r\n      );\r\n    }\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, [newBet]);\r\n\r\n  return (\r\n    <Container>\r\n      <RadioGroup\r\n        className={classes.dsplRadio}\r\n        value={betColor}\r\n        onChange={(event) => setBetColor(event.target.value)}\r\n      >\r\n        <MuiThemeProvider theme={newTheme}>\r\n          <FormControlLabel\r\n            value='red'\r\n            control={<Radio color='primary' />}\r\n            label={`Red X2`}\r\n          />\r\n          <FormControlLabel\r\n            value='green'\r\n            control={<Radio color='secondary' />}\r\n            label='Green X11'\r\n          />\r\n          <FormControlLabel\r\n            value='black'\r\n            control={<Radio color='default' />}\r\n            label='Black X2'\r\n          />\r\n        </MuiThemeProvider>\r\n      </RadioGroup>\r\n      <FormControlLabel\r\n        className={classes.dsplInput}\r\n        control={\r\n          <TextField\r\n            value={coins}\r\n            type='number'\r\n            color='secondary'\r\n            onChange={(event) => setCoins(event.target.value)}\r\n            label='Coins'\r\n            variant='outlined'\r\n            required\r\n            fullWidth\r\n            focused={focus}\r\n          />\r\n        }\r\n      />\r\n      <ButtonGroup color='secondary' variant='outlined'>\r\n        <Button onClick={() => addCoins(1)}>+1</Button>\r\n        <Button onClick={() => addCoins(5)}>+5</Button>\r\n        <Button onClick={() => addCoins(10)}>+10</Button>\r\n        <Button onClick={() => addCoins(100)}>+100</Button>\r\n        <Button onClick={() => addCoins(500)}>+500</Button>\r\n        <Button onClick={() => addCoins(1000)}>+1000</Button>\r\n      </ButtonGroup>\r\n      <ButtonGroup className={classes.dsplInput}>\r\n        <Button\r\n          onClick={() => {\r\n            placeBet();\r\n          }}\r\n          color='secondary'\r\n          variant='contained'\r\n        >\r\n          Place bet\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Snackbar\r\n        open={open.coinsHigherThan0}\r\n        autoHideDuration={6000}\r\n        onClose={() => setOpen({ ...open, coinsHigherThan0: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setOpen({ ...open, coinsHigherThan0: false })}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          Coins amount should be higher than 0\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={open.pickedColor}\r\n        autoHideDuration={6000}\r\n        onClose={() => setOpen({ ...open, pickedColor: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setOpen({ ...open, pickedColor: false })}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          You should pick a color before betting\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={open.succesfullyPlacedBet}\r\n        autoHideDuration={6000}\r\n        onClose={() => setOpen({ ...open, succesfullyPlacedBet: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setOpen({ ...open, succesfullyPlacedBet: false })}\r\n          severity='success'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          You've successfully placed your bet\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={open.betPlacedTooLate}\r\n        autoHideDuration={6000}\r\n        onClose={() => setOpen({ ...open, betPlacedTooLate: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setOpen({ ...open, betPlacedTooLate: false })}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          Too late!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        open={open.notEnoughCoins}\r\n        autoHideDuration={6000}\r\n        onClose={() => setOpen({ ...open, notEnoughCoins: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setOpen({ ...open, notEnoughCoins: false })}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          You don't have enough coins\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Bet;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\PlacedBets.js",["147"],"import { Container } from '@material-ui/core/';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport Cookies from 'js-cookie';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as mqtt from 'mqtt';\r\n\r\nfunction PlacedBets() {\r\n  const [rows, setRows] = useState([]);\r\n  const brokerAddress = 'localhost:8000/mqtt';\r\n  const columns = [\r\n    {\r\n      field: 'username',\r\n      headerName: 'Username',\r\n      width: 130,\r\n    },\r\n    {\r\n      field: 'color',\r\n      headerName: 'Color',\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        const color =\r\n          cellValues.value === 'red'\r\n            ? 'red'\r\n            : cellValues.value === 'green'\r\n            ? 'green'\r\n            : 'black';\r\n        return (\r\n          <div\r\n            style={{\r\n              color: color,\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: 'coins',\r\n      headerName: 'Coins',\r\n      width: 80,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/bet');\r\n    client.on('message', (topic, message) => {\r\n      const mess = JSON.parse(message.toString());\r\n      setRows((previousRows) => {\r\n        return [\r\n          ...previousRows,\r\n          {\r\n            id: uuidv4(),\r\n            username: mess.username,\r\n            color: mess.color,\r\n            coins: mess.coins,\r\n          },\r\n        ];\r\n      });\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://localhost:5000/bets/${Cookies.get('gameId')}`)\r\n      .then((value) => {\r\n        setRows(\r\n          value.data.map((el) => {\r\n            return {\r\n              id: uuidv4(),\r\n              username: el.user,\r\n              color: el.bet.color,\r\n              coins: el.bet.value,\r\n            };\r\n          })\r\n        );\r\n      });\r\n    return;\r\n  }, [Cookies.get('gameId')]);\r\n\r\n  return (\r\n    <Container style={{ height: 400, width: '100%' }}>\r\n      <br />\r\n      <DataGrid rows={rows} columns={columns} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PlacedBets;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Roulette.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\Navbar.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Deposit.js",[],"C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\History.js",["148","149"],"import {\r\n  Container,\r\n  Typography,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextField,\r\n} from '@material-ui/core/';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport Navbar from '../Navbar';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Box from '@mui/material/Box';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as mqtt from 'mqtt';\r\nimport * as _ from 'lodash';\r\nconst brokerAddress = 'localhost:8000/mqtt';\r\n\r\nfunction History() {\r\n  const { login } = useParams();\r\n  const [betHistory, setBetHistory] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [editedBetColor, setEditedBetColor] = useState('');\r\n  const [editedBetNumber, setEditedBetNumber] = useState('');\r\n  const [editedRoundHash, setEditedRoundHash] = useState('');\r\n  const [editedWindow, setEditedWindow] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCloseDisagree = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickOpenEdit = () => {\r\n    setOpenEdit(true);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setOpenEdit(false);\r\n  };\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/clear/history');\r\n    client.on('message', (topic, message) => {\r\n      setBetHistory([]);\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  });\r\n\r\n  const handleCloseAgree = () => {\r\n    axios.delete('https://localhost:5000/game/result/').then((value) => {\r\n      if (value.data === 'OK') {\r\n        const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n        client.publish('game/clear/history', 'clear');\r\n        setOpen(false);\r\n        setBetHistory([]);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/history/refresh/new');\r\n    client.on('message', (topic, message) => {\r\n      axios.get('https://localhost:5000/game/result/').then((value) => {\r\n        setBetHistory(\r\n          value.data\r\n            .map((el) => {\r\n              return {\r\n                ...el,\r\n                id: uuidv4(),\r\n              };\r\n            })\r\n            .reverse()\r\n        );\r\n        return () => {\r\n          client.end();\r\n        };\r\n      });\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://localhost:5000/users/${login}`).then((value) => {\r\n      if (value.data.admin === 'TRUE') setIsAdmin(true);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get('https://localhost:5000/game/result/').then((value) => {\r\n      setBetHistory(\r\n        value.data\r\n          .map((el) => {\r\n            return {\r\n              ...el,\r\n              id: uuidv4(),\r\n            };\r\n          })\r\n          .reverse()\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/timer');\r\n    client.on('message', (topic, message) => {\r\n      if (message.toString() === '28') {\r\n        axios.get('https://localhost:5000/game/result/').then((value) => {\r\n          setBetHistory(\r\n            value.data\r\n              .map((el) => {\r\n                return {\r\n                  ...el,\r\n                  id: uuidv4(),\r\n                };\r\n              })\r\n              .reverse()\r\n          );\r\n        });\r\n      }\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      field: 'gameId',\r\n      headerName: 'Round hash',\r\n      width: 300,\r\n    },\r\n    {\r\n      field: 'color',\r\n      headerName: 'Color',\r\n      width: 130,\r\n      renderCell: (cellValues) => {\r\n        const color =\r\n          cellValues.value === 'red'\r\n            ? 'red'\r\n            : cellValues.value === 'green'\r\n            ? 'green'\r\n            : 'black';\r\n        return (\r\n          <div\r\n            style={{\r\n              color: color,\r\n            }}\r\n          >\r\n            {cellValues.value}\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: 'number',\r\n      headerName: 'Number',\r\n      width: 130,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Navbar login={login} />\r\n      <Container>\r\n        <Typography style={{ margin: '10px' }} color='secondary' variant='h5'>\r\n          History\r\n        </Typography>\r\n        {isAdmin ? (\r\n          <div>\r\n            <Button\r\n              onClick={handleClickOpen}\r\n              variant='outlined'\r\n              color='secondary'\r\n              style={{ marginRight: '20px' }}\r\n            >\r\n              Clear history\r\n            </Button>\r\n            <Button\r\n              variant='outlined'\r\n              color='secondary'\r\n              onClick={handleClickOpenEdit}\r\n            >\r\n              Edit history\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleCloseDisagree}\r\n          aria-labelledby='alert-dialog-title'\r\n          aria-describedby='alert-dialog-description'\r\n        >\r\n          <DialogTitle id='alert-dialog-title'>\r\n            {'Are you sure to clear all history?'}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id='alert-dialog-description'>\r\n              If you confirm deleting, all records from history will be\r\n              pemanently deleted. This change is <strong>IRREVERSIBLE</strong>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseDisagree}>Disagree</Button>\r\n            <Button onClick={handleCloseAgree} autoFocus>\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Box>\r\n          <DataGrid\r\n            style={{ height: '600px', width: '100%', marginTop: '10px' }}\r\n            rows={betHistory}\r\n            columns={columns}\r\n          />\r\n        </Box>\r\n        <Dialog\r\n          open={openEdit}\r\n          onClose={handleCloseEdit}\r\n          aria-labelledby='alert-dialog-title'\r\n          aria-describedby='alert-dialog-description'\r\n        >\r\n          <DialogTitle id='alert-dialog-title'>{'Edit history'}</DialogTitle>\r\n          <DialogContent>\r\n            {betHistory.map((el) => {\r\n              return (\r\n                <div\r\n                  key={el.gameId}\r\n                  style={{\r\n                    fontSize: '15px',\r\n                    margin: '10px',\r\n                    borderBottom: '1px solid gray',\r\n                  }}\r\n                >\r\n                  <strong>{el.gameId}</strong>{' '}\r\n                  <strong\r\n                    style={{\r\n                      color: el.color,\r\n                      marginLeft: '10px',\r\n                      marginRight: '10px',\r\n                    }}\r\n                  >\r\n                    {el.color}\r\n                  </strong>{' '}\r\n                  <strong>{el.number}</strong>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setEditedBetColor(el.color);\r\n                      setEditedBetNumber(el.number);\r\n                      setEditedRoundHash(el.gameId);\r\n                      setEditedWindow(true);\r\n                    }}\r\n                    style={{ marginLeft: '10px', marginBottom: '10px' }}\r\n                    variant='outlined'\r\n                    color='secondary'\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </div>\r\n              );\r\n            })}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseEdit}>Close</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          open={editedWindow}\r\n          onClose={() => setEditedWindow(false)}\r\n          aria-labelledby='alert-dialog-title'\r\n          aria-describedby='alert-dialog-description'\r\n        >\r\n          <DialogTitle id='alert-dialog-title'>\r\n            {'Edit round result'}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Typography color='secondary'>Number:</Typography>\r\n            <TextField\r\n              onChange={(e) => setEditedBetNumber(e.target.value)}\r\n              value={editedBetNumber}\r\n              style={{\r\n                display: 'inline-block',\r\n                width: '200px',\r\n              }}\r\n              type='text'\r\n              color='secondary'\r\n              variant='outlined'\r\n            />\r\n            <Typography color='secondary'>Color:</Typography>\r\n            <TextField\r\n              onChange={(e) => setEditedBetColor(e.target.value)}\r\n              value={editedBetColor}\r\n              style={{\r\n                display: 'inline-block',\r\n                width: '200px',\r\n              }}\r\n              type='text'\r\n              color='secondary'\r\n              variant='outlined'\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setEditedWindow(false)}>Cancel</Button>\r\n            <Button\r\n              autoFocus\r\n              onClick={() => {\r\n                axios\r\n                  .put(\r\n                    `https://localhost:5000/game/result/${editedRoundHash}`,\r\n                    {\r\n                      color: editedBetColor,\r\n                      number: editedBetNumber,\r\n                    }\r\n                  )\r\n                  .then(() => {\r\n                    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n                    client.publish('game/history/refresh', 'refresh');\r\n                    setEditedWindow(false);\r\n                  });\r\n              }}\r\n            >\r\n              Edit\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\chat\\Chat.js",["150"],"import {\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Snackbar,\r\n} from '@material-ui/core';\r\nimport MessageIcon from '@mui/icons-material/Message';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport { useState } from 'react';\r\nimport Flags from 'country-flag-icons/react/3x2';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport { useEffect, forwardRef } from 'react';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport * as mqtt from 'mqtt';\r\nimport * as axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction Chat() {\r\n  const { login } = useParams();\r\n  const [chat, setChat] = useState(false);\r\n  const [room, setRoom] = useState('US');\r\n  const [message, setMessage] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n  const [PL, setPL] = useState([]);\r\n  const [US, setUS] = useState([]);\r\n  const [DE, setDE] = useState([]);\r\n  const [editedMessage, setEditedMessage] = useState(null);\r\n  const [id, setId] = useState(null);\r\n  const [emptyMessage, setEmptyMessage] = useState(false);\r\n  const brokerAddress = 'localhost:8000/mqtt';\r\n  const Alert = forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;\r\n  });\r\n  const handleEditedMessage = (value) => {\r\n    setEditedMessage(value);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editMessage = (id, message) => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.publish(`message/edited`, JSON.stringify({ id, message }));\r\n    setOpen(false);\r\n  };\r\n\r\n  const showChat = () => {\r\n    if (chat !== false) {\r\n      setChat(false);\r\n    } else {\r\n      setChat(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.publish(\r\n      `chat/${room}`,\r\n      JSON.stringify({\r\n        username: 'system',\r\n        message: `${login} joined the room`,\r\n      })\r\n    );\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, [room]);\r\n\r\n  useEffect(() => {\r\n    axios.get('https://localhost:5000/chats/US').then((chatsUS) => {\r\n      setUS(chatsUS.data);\r\n    });\r\n    axios.get('https://localhost:5000/chats/PL').then((chatsPL) => {\r\n      setPL(chatsPL.data);\r\n    });\r\n    axios.get('https://localhost:5000/chats/DE').then((chatsDE) => {\r\n      setDE(chatsDE.data);\r\n    });\r\n  }, []);\r\n\r\n  const handleMessage = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('message/edited/signal');\r\n    const update_mqtt = () => {\r\n      client.on('message', (topic, message) => {\r\n        axios.get('https://localhost:5000/chats/US').then((chatsUS) => {\r\n          setUS(chatsUS.data);\r\n        });\r\n        axios.get('https://localhost:5000/chats/PL').then((chatsPL) => {\r\n          setPL(chatsPL.data);\r\n        });\r\n        axios.get('https://localhost:5000/chats/DE').then((chatsDE) => {\r\n          setDE(chatsDE.data);\r\n        });\r\n      });\r\n    };\r\n    update_mqtt();\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('new/messages');\r\n    const update_mqtt = () => {\r\n      client.on('message', (_, message) => {\r\n        const converted = JSON.parse(message);\r\n        converted.channel === 'US'\r\n          ? setUS((prev) => [...prev, converted])\r\n          : converted.channel === 'PL'\r\n          ? setPL((prev) => [...prev, converted])\r\n          : setDE((prev) => [...prev, converted]);\r\n      });\r\n    };\r\n    update_mqtt();\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = (message, room) => {\r\n    if (message === '') setEmptyMessage(true);\r\n    else {\r\n      const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n      client.on('connect', () => {\r\n        client.publish(\r\n          `chat/${room}`,\r\n          JSON.stringify({ username: login, message })\r\n        );\r\n        client.end();\r\n        setMessage('');\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        open={emptyMessage}\r\n        autoHideDuration={6000}\r\n        onClose={() => setEmptyMessage(false)}\r\n      >\r\n        <Alert\r\n          onClose={() => setEmptyMessage(false)}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          You can't send empty message!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-title'\r\n        aria-describedby='alert-dialog-description'\r\n      >\r\n        <DialogTitle id='alert-dialog-title'>{'Edit message'}</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            onChange={(e) => handleEditedMessage(e.target.value)}\r\n            value={editedMessage}\r\n            style={{\r\n              display: 'inline-block',\r\n              width: '200px',\r\n            }}\r\n            type='text'\r\n            color='secondary'\r\n            variant='outlined'\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() => editMessage(id, editedMessage)} autoFocus>\r\n            Edit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {chat ? (\r\n        <Card\r\n          style={{\r\n            border: '1px solid rgb(245, 0, 87)',\r\n            zIndex: '2',\r\n            position: 'fixed',\r\n            bottom: '50px',\r\n            left: '10px',\r\n            width: '300px',\r\n            height: '500px',\r\n          }}\r\n        >\r\n          <Typography\r\n            style={{\r\n              paddingTop: '10px',\r\n              color: 'white',\r\n              backgroundColor: 'rgb(245, 0, 87)',\r\n            }}\r\n            variant='h6'\r\n          >\r\n            Current room: {room}\r\n          </Typography>\r\n          <CardContent style={{ backgroundColor: 'rgb(245, 0, 87)' }}>\r\n            <Flags.US\r\n              onClick={() => setRoom('US')}\r\n              title='United States'\r\n              style={{\r\n                cursor: 'pointer',\r\n                width: '40px',\r\n                height: '30px',\r\n              }}\r\n            />\r\n            <Flags.PL\r\n              onClick={() => setRoom('PL')}\r\n              style={{\r\n                cursor: 'pointer',\r\n                marginLeft: '20px',\r\n                width: '40px',\r\n                height: '30px',\r\n              }}\r\n            />\r\n            <Flags.DE\r\n              onClick={() => setRoom('DE')}\r\n              style={{\r\n                cursor: 'pointer',\r\n                marginLeft: '20px',\r\n                width: '40px',\r\n                height: '30px',\r\n              }}\r\n            />\r\n          </CardContent>\r\n          <List style={{ height: '280px', overflow: 'auto' }}>\r\n            {room === 'US'\r\n              ? US.map((el) => {\r\n                  return (\r\n                    <ListItem button key={uuidv4()}>\r\n                      <ListItemText primary={el.from} secondary={el.message} />\r\n                      {el.from === login ? (\r\n                        <Button\r\n                          color='secondary'\r\n                          onClick={() => {\r\n                            setEditedMessage(el.message);\r\n                            setId(el.id);\r\n                            handleClickOpen();\r\n                          }}\r\n                        >\r\n                          edit\r\n                        </Button>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </ListItem>\r\n                  );\r\n                })\r\n              : room === 'PL'\r\n              ? PL.map((el) => {\r\n                  return (\r\n                    <ListItem button key={uuidv4()}>\r\n                      <ListItemText primary={el.from} secondary={el.message} />\r\n                      {el.from === login ? (\r\n                        <Button\r\n                          color='secondary'\r\n                          onClick={() => {\r\n                            setEditedMessage(el.message);\r\n                            setId(el.id);\r\n                            handleClickOpen();\r\n                          }}\r\n                        >\r\n                          edit\r\n                        </Button>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </ListItem>\r\n                  );\r\n                })\r\n              : DE.map((el) => {\r\n                  return (\r\n                    <ListItem button key={uuidv4()}>\r\n                      <ListItemText primary={el.from} secondary={el.message} />\r\n                      {el.from === login ? (\r\n                        <Button\r\n                          color='secondary'\r\n                          onClick={() => {\r\n                            setEditedMessage(el.message);\r\n                            setId(el.id);\r\n                            handleClickOpen();\r\n                          }}\r\n                        >\r\n                          edit\r\n                        </Button>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n          </List>\r\n          <CardContent>\r\n            <TextField\r\n              value={message}\r\n              onChange={handleMessage}\r\n              style={{\r\n                display: 'inline-block',\r\n                width: '200px',\r\n              }}\r\n              type='text'\r\n              color='secondary'\r\n              label='Write a message'\r\n              variant='outlined'\r\n            />\r\n            <Button\r\n              onClick={() => sendMessage(message, room)}\r\n              variant='outlined'\r\n              style={{\r\n                display: 'inline-block',\r\n                height: '56px',\r\n              }}\r\n            >\r\n              <SendIcon\r\n                style={{\r\n                  position: 'relative',\r\n                  top: '5px',\r\n                  left: '2px',\r\n                  color: 'rgb(245, 0, 87)',\r\n                }}\r\n              />\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <Chip\r\n        onClick={() => showChat()}\r\n        style={{\r\n          backgroundColor: 'white',\r\n          zIndex: '2',\r\n          cursor: 'pointer',\r\n          padding: '10px',\r\n          border: '1px solid rgb(245, 0, 87)',\r\n          color: 'rgb(245, 0, 87)',\r\n          position: 'fixed',\r\n          left: '10px',\r\n          bottom: '10px',\r\n        }}\r\n        avatar={\r\n          <MessageIcon fontSize='large' style={{ color: 'rgb(245, 0, 87)' }} />\r\n        }\r\n        variant='outlined'\r\n        label='Chat'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\Qotes.js",["151"],"import { Container, Typography } from '@material-ui/core';\r\nimport { useState, useEffect } from 'react';\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\n\r\nconst useEventSource = (url) => {\r\n  const [data, updateData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const source = new EventSource(url);\r\n\r\n    source.onmessage = function logEvents(event) {\r\n      updateData(event.data);\r\n    };\r\n    return () => {\r\n      source.close();\r\n    };\r\n  }, []);\r\n\r\n  return data;\r\n};\r\n\r\nfunction Qotes() {\r\n  const data = useEventSource('https://localhost:5000/quotes/');\r\n  if (!data) {\r\n    return <div />;\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        border: '1px solid rgb(245, 0, 87)',\r\n        width: '50%',\r\n        height: '200px',\r\n        borderRadius: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <Typography\r\n        color='secondary'\r\n        variant='h4'\r\n        style={{ alignSelf: 'center' }}\r\n      >\r\n        {data}\r\n      </Typography>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Qotes;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\ActualBets.js",["152","153","154"],"import { Container, Typography, Button, Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as mqtt from 'mqtt';\r\nimport { useEffect, useState, forwardRef } from 'react';\r\nimport * as axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as _ from 'lodash';\r\nconst brokerAddress = 'localhost:8000/mqtt';\r\n\r\nfunction ActualBets({ timer }) {\r\n  const [red, setRed] = useState(0);\r\n  const [green, setGreen] = useState(0);\r\n  const [black, setBlack] = useState(0);\r\n  const { login } = useParams();\r\n  const [cannotDelete, setCannotDelete] = useState(false);\r\n  const Alert = forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;\r\n  });\r\n\r\n  const deleteBet = (color) => {\r\n    if (timer === 'losowanie...') setCannotDelete(true);\r\n    else {\r\n      axios\r\n        .delete(\r\n          `https://localhost:5000/bets/${login}/game/${Cookies.get(\r\n            'gameId'\r\n          )}/${color}`\r\n        )\r\n        .then((value) => {\r\n          const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n          client.publish(\r\n            'game/delete/bet',\r\n            JSON.stringify({ username: login, color: color })\r\n          );\r\n          axios.put('https://localhost:5000/users/', {\r\n            username: login,\r\n            money:\r\n              parseInt(Cookies.get(`money${login}`)) +\r\n              parseInt(\r\n                color === 'red' ? red : color === 'green' ? green : black\r\n              ),\r\n          });\r\n          Cookies.set(\r\n            `money${login}`,\r\n            parseInt(Cookies.get(`money${login}`)) +\r\n              parseInt(\r\n                color === 'red' ? red : color === 'green' ? green : black\r\n              )\r\n          );\r\n          color === 'red'\r\n            ? setRed(0)\r\n            : color === 'green'\r\n            ? setGreen(0)\r\n            : setBlack(0);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRed(0);\r\n    setGreen(0);\r\n    setBlack(0);\r\n  }, [Cookies.get('gameId')]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://localhost:5000/bets/${Cookies.get('gameId')}`)\r\n      .then((value) => {\r\n        setRed(\r\n          !_.isEmpty(\r\n            value.data\r\n              .filter((el) => el.bet.color === 'red' && el.user === login)\r\n              .map((el) => el.bet.value)\r\n          )\r\n            ? value.data\r\n                .filter((el) => el.bet.color === 'red' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            : 0\r\n        );\r\n        setGreen(\r\n          !_.isEmpty(\r\n            value.data\r\n              .filter((el) => el.bet.color === 'green' && el.user === login)\r\n              .map((el) => el.bet.value)\r\n          )\r\n            ? value.data\r\n                .filter((el) => el.bet.color === 'green' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            : 0\r\n        );\r\n        setBlack(\r\n          !_.isEmpty(\r\n            value.data\r\n              .filter((el) => el.bet.color === 'black' && el.user === login)\r\n              .map((el) => el.bet.value)\r\n          )\r\n            ? value.data\r\n                .filter((el) => el.bet.color === 'black' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            : 0\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/bet');\r\n    client.on('message', (topic, message) => {\r\n      axios\r\n        .get(`https://localhost:5000/bets/${Cookies.get('gameId')}`)\r\n        .then((value) => {\r\n          setRed(\r\n            !_.isEmpty(\r\n              value.data\r\n                .filter((el) => el.bet.color === 'red' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            )\r\n              ? value.data\r\n                  .filter((el) => el.bet.color === 'red' && el.user === login)\r\n                  .map((el) => el.bet.value)\r\n              : 0\r\n          );\r\n          setGreen(\r\n            !_.isEmpty(\r\n              value.data\r\n                .filter((el) => el.bet.color === 'green' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            )\r\n              ? value.data\r\n                  .filter((el) => el.bet.color === 'green' && el.user === login)\r\n                  .map((el) => el.bet.value)\r\n              : 0\r\n          );\r\n          setBlack(\r\n            !_.isEmpty(\r\n              value.data\r\n                .filter((el) => el.bet.color === 'black' && el.user === login)\r\n                .map((el) => el.bet.value)\r\n            )\r\n              ? value.data\r\n                  .filter((el) => el.bet.color === 'black' && el.user === login)\r\n                  .map((el) => el.bet.value)\r\n              : 0\r\n          );\r\n        });\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        border: '1px solid rgb(245, 0, 87)',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        left: '10px',\r\n        width: '300px',\r\n        height: 'auto',\r\n        borderRadius: '20px',\r\n      }}\r\n    >\r\n      <Snackbar\r\n        open={cannotDelete}\r\n        autoHideDuration={6000}\r\n        onClose={() => setCannotDelete(false)}\r\n      >\r\n        <Alert\r\n          onClose={() => setCannotDelete(false)}\r\n          severity='error'\r\n          sx={{ width: '100%' }}\r\n        >\r\n          Too late!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Typography style={{ color: 'rgb(245, 0, 87)' }} variant='h5'>\r\n        {' '}\r\n        Your bets:\r\n      </Typography>\r\n      <Typography\r\n        style={{ color: 'red', textAlign: 'start', display: 'inline-block' }}\r\n      >\r\n        Red: {red}\r\n      </Typography>\r\n      {red !== 0 ? (\r\n        <Button\r\n          onClick={() => deleteBet('red')}\r\n          style={{ margin: '5px' }}\r\n          variant='outlined'\r\n          color='secondary'\r\n        >\r\n          delete bet\r\n        </Button>\r\n      ) : (\r\n        ''\r\n      )}{' '}\r\n      <br />\r\n      <Typography\r\n        style={{ color: 'green', textAlign: 'start', display: 'inline-block' }}\r\n      >\r\n        Green: {green}\r\n      </Typography>\r\n      {green !== 0 ? (\r\n        <Button\r\n          onClick={() => deleteBet('green')}\r\n          style={{ margin: '5px' }}\r\n          variant='outlined'\r\n          color='secondary'\r\n        >\r\n          delete bet\r\n        </Button>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <br />\r\n      <Typography\r\n        style={{ color: 'black', textAlign: 'start', display: 'inline-block' }}\r\n      >\r\n        Black: {black}\r\n      </Typography>\r\n      {black !== 0 ? (\r\n        <Button\r\n          onClick={() => deleteBet('black')}\r\n          style={{ margin: '5px' }}\r\n          variant='outlined'\r\n          color='secondary'\r\n        >\r\n          delete bet\r\n        </Button>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <br />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ActualBets;\r\n","C:\\Users\\gruby\\protokoly\\projekt\\frontend\\src\\ui\\game\\Scoreboard.js",["155","156"],"import { useParams } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport Navbar from '../Navbar';\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport { Bar as BarJS } from 'chart.js/auto';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport * as mqtt from 'mqtt';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nconst brokerAddress = 'localhost:8000/mqtt';\r\n\r\nfunction Scoreboard() {\r\n  const { login } = useParams();\r\n  const [usernames, setUsernames] = useState([]);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const client = mqtt.connect(`mqtt://${brokerAddress}`);\r\n    client.subscribe('game/#');\r\n    client.on('message', (topic, message) => {\r\n      if (\r\n        topic === 'game/bet' ||\r\n        topic === 'game/delete/bet' ||\r\n        (topic === 'game/timer' && message.toString() === '6')\r\n      ) {\r\n        axios.get('https://localhost:5000/users/topBets').then((value) => {\r\n          setUsernames(\r\n            value.data.reduce((prev, curr) => {\r\n              return [...prev, curr.username];\r\n            }, [])\r\n          );\r\n          setCoins(\r\n            value.data.reduce((prev, curr) => {\r\n              return [...prev, curr.money];\r\n            }, [])\r\n          );\r\n        });\r\n      }\r\n    });\r\n    return () => {\r\n      client.end();\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios.get('https://localhost:5000/users/topBets').then((value) => {\r\n      setUsernames(\r\n        value.data.reduce((prev, curr) => {\r\n          return [...prev, curr.username];\r\n        }, [])\r\n      );\r\n      setCoins(\r\n        value.data.reduce((prev, curr) => {\r\n          return [...prev, curr.money];\r\n        }, [])\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar login={login} />\r\n      <Typography variant='h2' color='secondary'>\r\n        Top 10\r\n      </Typography>\r\n      <Typography variant='h4' color='secondary'>\r\n        The highest coins amount\r\n      </Typography>\r\n      <br />\r\n      <Container>\r\n        <Bar\r\n          options={{\r\n            maintainAspectRatio: true,\r\n            plugins: {\r\n              legend: {\r\n                display: false,\r\n              },\r\n            },\r\n          }}\r\n          data={{\r\n            labels: usernames,\r\n            datasets: [\r\n              {\r\n                data: coins,\r\n                backgroundColor: [\r\n                  'rgba(255, 99, 132, 0.2)',\r\n                  'rgba(255, 159, 64, 0.2)',\r\n                  'rgba(255, 205, 86, 0.2)',\r\n                  'rgba(75, 192, 192, 0.2)',\r\n                ],\r\n                borderColor: 'white',\r\n                borderWidth: 5,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\index.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\App.js",["157"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\Navbar.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\users\\UserForm.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Game.js",["158"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\MainPage.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Scoreboard.js",["159","160"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\History.js",["161","162"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Deposit.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Bet.js",["163","164"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\Roulette.js",[],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\PlacedBets.js",["165"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\game\\ActualBets.js",["166","167","168"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\Qotes.js",["169"],"C:\\Users\\gruby\\gambling_roulette-javascript\\frontend\\src\\ui\\chat\\Chat.js",["170"],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":14},{"ruleId":"175","severity":1,"message":"179","line":17,"column":10,"nodeType":"177","messageId":"178","endLine":17,"endColumn":22},{"ruleId":"180","severity":1,"message":"181","line":122,"column":6,"nodeType":"182","endLine":122,"endColumn":8,"suggestions":"183"},{"ruleId":"180","severity":1,"message":"181","line":139,"column":6,"nodeType":"182","endLine":139,"endColumn":14,"suggestions":"184"},{"ruleId":"180","severity":1,"message":"185","line":85,"column":7,"nodeType":"186","endLine":85,"endColumn":28},{"ruleId":"175","severity":1,"message":"187","line":20,"column":13,"nodeType":"177","messageId":"178","endLine":20,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":97,"column":6,"nodeType":"182","endLine":97,"endColumn":8,"suggestions":"188"},{"ruleId":"180","severity":1,"message":"181","line":82,"column":6,"nodeType":"182","endLine":82,"endColumn":12,"suggestions":"189"},{"ruleId":"180","severity":1,"message":"190","line":20,"column":6,"nodeType":"182","endLine":20,"endColumn":8,"suggestions":"191"},{"ruleId":"180","severity":1,"message":"185","line":64,"column":7,"nodeType":"186","endLine":64,"endColumn":28},{"ruleId":"180","severity":1,"message":"181","line":104,"column":6,"nodeType":"182","endLine":104,"endColumn":8,"suggestions":"192"},{"ruleId":"180","severity":1,"message":"181","line":151,"column":6,"nodeType":"182","endLine":151,"endColumn":8,"suggestions":"193"},{"ruleId":"175","severity":1,"message":"194","line":8,"column":17,"nodeType":"177","messageId":"178","endLine":8,"endColumn":22},{"ruleId":"175","severity":1,"message":"195","line":13,"column":8,"nodeType":"177","messageId":"178","endLine":13,"endColumn":15},{"ruleId":"175","severity":1,"message":"176","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":14},{"ruleId":"175","severity":1,"message":"179","line":17,"column":10,"nodeType":"177","messageId":"178","endLine":17,"endColumn":22},{"ruleId":"175","severity":1,"message":"194","line":8,"column":17,"nodeType":"177","messageId":"178","endLine":8,"endColumn":22},{"ruleId":"175","severity":1,"message":"195","line":13,"column":8,"nodeType":"177","messageId":"178","endLine":13,"endColumn":15},{"ruleId":"175","severity":1,"message":"187","line":20,"column":13,"nodeType":"177","messageId":"178","endLine":20,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":97,"column":6,"nodeType":"182","endLine":97,"endColumn":8,"suggestions":"196"},{"ruleId":"180","severity":1,"message":"181","line":122,"column":6,"nodeType":"182","endLine":122,"endColumn":8,"suggestions":"197"},{"ruleId":"180","severity":1,"message":"181","line":139,"column":6,"nodeType":"182","endLine":139,"endColumn":14,"suggestions":"198"},{"ruleId":"180","severity":1,"message":"185","line":85,"column":7,"nodeType":"186","endLine":85,"endColumn":28},{"ruleId":"180","severity":1,"message":"185","line":64,"column":7,"nodeType":"186","endLine":64,"endColumn":28},{"ruleId":"180","severity":1,"message":"181","line":104,"column":6,"nodeType":"182","endLine":104,"endColumn":8,"suggestions":"199"},{"ruleId":"180","severity":1,"message":"181","line":151,"column":6,"nodeType":"182","endLine":151,"endColumn":8,"suggestions":"200"},{"ruleId":"180","severity":1,"message":"190","line":20,"column":6,"nodeType":"182","endLine":20,"endColumn":8,"suggestions":"201"},{"ruleId":"180","severity":1,"message":"181","line":82,"column":6,"nodeType":"182","endLine":82,"endColumn":12,"suggestions":"202"},"no-native-reassign",["203"],"no-negated-in-lhs",["204"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'winningColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.","ArrayExpression",["205"],["206"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'_' is defined but never used.",["207"],["208"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["209"],["210"],["211"],"'BarJS' is defined but never used.","'Cookies' is defined but never used.",["212"],["213"],["214"],["215"],["216"],["217"],["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"219","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"219","fix":"228"},{"desc":"219","fix":"229"},{"desc":"219","fix":"230"},{"desc":"219","fix":"231"},{"desc":"221","fix":"232"},{"desc":"219","fix":"233"},{"desc":"219","fix":"234"},{"desc":"226","fix":"235"},{"desc":"224","fix":"236"},"Update the dependencies array to be: [login]",{"range":"237","text":"238"},"Update the dependencies array to be: [login, newBet]",{"range":"239","text":"240"},{"range":"241","text":"238"},"Update the dependencies array to be: [login, room]",{"range":"242","text":"243"},"Update the dependencies array to be: [url]",{"range":"244","text":"245"},{"range":"246","text":"238"},{"range":"247","text":"238"},{"range":"248","text":"238"},{"range":"249","text":"238"},{"range":"250","text":"240"},{"range":"251","text":"238"},{"range":"252","text":"238"},{"range":"253","text":"245"},{"range":"254","text":"243"},[3620,3622],"[login]",[4009,4017],"[login, newBet]",[2706,2708],[2216,2222],"[login, room]",[555,557],"[url]",[3369,3371],[4923,4925],[2706,2708],[3620,3622],[4009,4017],[3369,3371],[4923,4925],[555,557],[2216,2222]]